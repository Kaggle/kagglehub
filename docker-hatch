#!/bin/bash
set -e

PYTHON_VERSION='3.11.6' # Default Python version to use.
CACHE_FLAG=''

usage() {
cat << EOF
Usage: $0 [OPTIONS] HATCH-OPTIONS-COMMAND-ARGS
Run the given HATCH-OPTIONS-COMMAND-ARGS in a container.

Options:
    -P, --python-version PYTHON-VERSION     Run in a container using this specfic Python version.
                                            Valid versions are tags of the `python` Docker image: https://hub.docker.com/_/python
    -f, --force-rebuild-docker-image        Force re-build the Docker image.
EOF
}

while :; do
    case "$1" in 
        -h)
            usage
            exit
            ;;        
        -P|--python-version)
            if [[ -z $2 ]]; then
                usage
                printf 'ERROR: No PYTHON-VERSION specified after the %s flag.\n' "$1" >&2
                exit
            fi
            PYTHON_VERSION=$2
            shift # skip the flag value
            ;;
        -f|--force-rebuild-docker-image)
            CACHE_FLAG='--no-cache'
            ;;
        # These are flags for hatch commands: https://hatch.pypa.io/latest/cli/reference/#hatch
        # Instead of flagging as an unknown option below, let them pass through to hatch.
        -e|--env|-p|--project|-v|--verbose|-q|--quiet|--color|--no-color|--interactive|--no-interactive)
            break
            ;;
        --data-dir|--cache-dir|--config|--version|--help)
            break
            ;;
        -?*)
            usage
            printf 'ERROR: Unknown option: %s\n' "$1" >&2
            exit
            ;;
        *)            
            break
    esac

    shift
done

DOCKER_IMAGE="kagglehub-docker-hatch:${PYTHON_VERSION}"

readonly PYTHON_VERSION
readonly DOCKER_IMAGE
readonly CACHE_FLAG

echo "Running 'hatch $@' inside a Docker container using Python ${PYTHON_VERSION}"

docker build -f Dockerfile \
    -t ${DOCKER_IMAGE} \
    ${CACHE_FLAG} \
    --cache-from ${DOCKER_IMAGE} \
    --build-arg PYTHON_VERSION=${PYTHON_VERSION} \
    --quiet \
    .

set -x
docker run --rm -v $PWD:/working -v ~/.kaggle:/root/.kaggle -w /working ${DOCKER_IMAGE} "$@"
